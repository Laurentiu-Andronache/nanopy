#!/usr/bin/env python3

import argparse, getpass, gnupg, os, json, configparser, requests
from nanopy import *
import nanopy.rpc as rpc


class bcolors:
    ok1 = '\033[34m'
    ok2 = '\033[35m'
    ok3 = '\033[32m'
    warn1 = '\033[33m'
    warn2 = '\033[31m'
    end = '\033[0m'
    bold = '\033[1m'
    underline = '\033[4m'


def get_no_value_options(section):
    options = config.options(section)
    try:
        options.remove('tor')
    except:
        pass
    try:
        options.remove('rpc')
    except:
        pass
    try:
        options.remove('offline')
    except:
        pass
    try:
        options.remove('account')
    except:
        pass
    try:
        options.remove('frontier')
    except:
        pass
    try:
        options.remove('balance')
    except:
        pass
    try:
        options.remove('representative')
    except:
        pass
    return options


def formatted_balance_printer(label, colour, amount):
    print(label + ' :', colour + '{:>40}'.format(amount) + bcolors.end,
          mrai_name)


def generate_block(sk, pk, account):
    nb = base_block()
    nb['account'] = account
    print('Acc :', nb['account'])

    info = {'error': 'Account not found'}
    rb = {}
    state_found = False
    for state in states:
        if config[state]['account'] == nb['account']:
            state_found = True
            break

    while True:
        if online:
            info = rpc.account_info(nb['account'], representative=True)
            if nanopy.account_prefix == 'nano_':  # just change already!!!! !@$@#%!$#^#!^
                try:
                    rb = rpc.accounts_pending(
                        [nb['account']])['blocks'][nb['account']]
                    print('\033[92m' +
                          'Fixed!!! Upstream changed RPC responses to nano_' +
                          '\033[0m')
                except:
                    rb = rpc.accounts_pending(
                        [nb['account']])['blocks']['xrb_' + nb['account'][-60:]]
            else:
                rb = rpc.accounts_pending(
                    [nb['account']])['blocks'][nb['account']]
        elif state_found:
            info['frontier'] = config[state]['frontier']
            info['balance'] = config[state]['balance']
            info['representative'] = config[state]['representative']
            rb = get_no_value_options(state)
        try:
            nb['previous'] = info['frontier']
            nb['balance'] = info['balance']
            nb['representative'] = info['representative']
            formatted_balance_printer('Bal', bcolors.ok1,
                                      mrai_from_raw(nb['balance']))
            print('Rep :', nb['representative'])

            if online:
                try:  # nag users to change representative
                    if int(
                            rpc.account_info(nb['representative'],
                                             weight=True)['weight']
                    ) * 100 / available_supply > 0.2 and not args.change_rep_to:
                        print(
                            bcolors.warn1,
                            '\nYour representative has too much voting weight.',
                            bcolors.end)
                        if (input('Change rep?(' + bcolors.bold + 'y' +
                                  bcolors.end + '/n): ') or 'y') == 'y':
                            args.change_rep_to = input('Rep : ')
                except:
                    pass

            if args.change_rep_to:
                account_key(args.change_rep_to)
                nb['representative'] = args.change_rep_to

            if (not args.send_to) and (not args.change_rep_to):
                if state_found and online:
                    config[state]['frontier'] = info['frontier']
                    config[state]['balance'] = info['balance']
                    config[state]['representative'] = info['representative']
                    with open(config_file, 'w') as f:
                        config.write(f)
                if not rb: break
                if (input('\nReceive pending blocks?(' + bcolors.bold + 'y' +
                          bcolors.end + '/n): ') or 'y') != 'y':
                    break

        except KeyError:
            if not rb:
                print(bcolors.warn2, info, bcolors.end)
                break
            else:
                args.send_to = None
                nb['balance'] = '0'
                formatted_balance_printer('Bal', bcolors.ok1,
                                          mrai_from_raw(nb['balance']))
                nb['representative'] = input('Rep : ')

        if args.send_to:
            nb['link'] = account_key(args.send_to)
            print('\nTo  :', account_get(nb['link']))
            if args.empty_to:
                formatted_balance_printer('Amt', bcolors.warn2,
                                          mrai_from_raw(nb['balance']))
                nb['balance'] = '0'
            else:
                while True:
                    amount = int(mrai_to_raw(input('Amt : ')))
                    if amount <= int(nb['balance']):
                        nb['balance'] = str(int(nb['balance']) - amount)
                        break
                    print(bcolors.warn2,
                          'Amount must be less than or equal to balance.',
                          bcolors.end)
            formatted_balance_printer('Bal', bcolors.warn1,
                                      mrai_from_raw(nb['balance']))

        elif rb:
            nb['link'] = rb[0]
            if online:
                r_block = rpc.blocks_info(rb)['blocks'][nb['link']]
                print('\nFrom:', r_block['block_account'])
                amount = r_block['amount']
                nb['balance'] = str(int(nb['balance']) + int(amount))
            else:
                amount = config[state][rb[0]]
                nb['balance'] = str(int(nb['balance']) + int(amount))
            formatted_balance_printer('Amt', bcolors.ok3, mrai_from_raw(amount))
            formatted_balance_printer('Bal', bcolors.ok3,
                                      mrai_from_raw(nb['balance']))

        if (args.send_to or args.change_rep_to or rb):
            args.send_to = None
            args.change_rep_to = None

            work_hash = nb['previous']
            if (nb['previous'] ==
                    '0000000000000000000000000000000000000000000000000000000000000000'
               ):
                work_hash = account_key(nb['account'])

            if rpc.work_url:
                try:
                    nb['work'] = rpc.work_generate(work_hash)['work']
                except:
                    print(
                        bcolors.warn1,
                        'Node rejected work request, switching to local PoW.',
                        bcolors.end)
                    rpc.work_url = ''

            if not rpc.work_url: nb['work'] = work_generate(work_hash)

            nb['signature'] = sign_block(sk, pk, nb)

            print('\n' + json.dumps(nb))

            if online:
                query = '\nBroadcast block?(y/' + bcolors.bold + 'n' + bcolors.end + '): '
            else:
                query = '\nUpdate state?(y/' + bcolors.bold + 'n' + bcolors.end + '): '
            if (input(query) or 'n') == 'y':
                if args.demo: print(bcolors.warn1, 'demo mode', bcolors.end)
                else:
                    if online:
                        ack = rpc.process(json.dumps(nb))
                        try:
                            print(bcolors.ok3, ack['hash'], bcolors.end)
                        except:
                            print(bcolors.warn2, ack, bcolors.end)
                            state_found = False
                    if state_found:
                        config[state]['frontier'] = block_hash(nb)
                        config[state]['balance'] = nb['balance']
                        config[state]['representative'] = nb['representative']
                        if rb:
                            try:
                                config.remove_option(state, rb[0])
                            except:
                                pass
                        with open(config_file, 'w') as f:
                            config.write(f)
                        print(bcolors.ok3, 'saved new state to', config_file,
                              bcolors.end)


parser = argparse.ArgumentParser()

subparsers = parser.add_subparsers()
parser_open = subparsers.add_parser('open', help='Unlock GPG encrypted wallet')
parser_open.add_argument(
    'f',
    metavar='FILENAME',
    type=argparse.FileType('rb'),
    help='Decrypt seed from FILENAME.')
parser_open.add_argument(
    '-i',
    '--index',
    default=0,
    type=int,
    help='Index of the account unlocked from the seed. (Default=0)')
parser_open.add_argument(
    '-c',
    '--change-rep-to',
    metavar='ADDRESS',
    help='Change representative to ADDRESS.')
parser_open.add_argument(
    '--demo',
    action='store_true',
    help='Run in demo mode. Never broadcast blocks.')
parser_open.add_argument(
    '--offline', action='store_true', help='Run in offline mode.')

open_group = parser_open.add_mutually_exclusive_group()
open_group.add_argument(
    '-s', '--send-to', metavar='ADDRESS', help='Send NANO to ADDRESS.')
open_group.add_argument(
    '--empty-to', metavar='ADDRESS', help='Send all the funds to ADDRESS.')
open_group.add_argument(
    '--audit',
    action='store_true',
    help='Check state of all accounts from index 0 to INDEX.')

parser.add_argument(
    '--new',
    action='store_true',
    help='Generate a new account and output the GPG encrypted seed.')
parser.add_argument(
    '--audit-file',
    metavar='FILENAME',
    type=argparse.FileType('rb'),
    help='Check state of all the accounts in FILENAME.')
parser.add_argument(
    '--broadcast',
    action='store_true',
    help='Broadcast a block in JSON format.')
parser.add_argument(
    '--network',
    default='main',
    type=str,
    help='Choose the network to interact with. main, beta, banano..')
parser.add_argument(
    '-t', '--tor', action='store_true', help='Connect to the RPC node via tor.')

args = parser.parse_args()

mrai_name = 'NANO'
available_supply = 133248289196499221154116917710445381553
if args.network == 'beta':
    nanopy.account_prefix = 'xrb_'
    rpc.url = 'http://localhost:55000'
    mrai_name = '\u03B2NANO'
    available_supply = 340272367920938463463374607431768151531
elif args.network == 'banano':
    nanopy.account_prefix = 'ban_'
    nanopy.work_difficulty = 'fffffe0000000000'
    rpc.url = 'http://localhost:7072'
    mrai_name = 'BANANO'
    available_supply = 3402723679209384634633746074317681515310

config_file = os.path.expanduser(
    '~') + '/.config/nanopy/' + args.network + '.conf'

config = configparser.ConfigParser(allow_no_value=True)
config.read(config_file)

states = config.sections()
try:
    states.remove('Accounts')
except:
    pass

online = not config['DEFAULT'].getboolean('offline')
if online:
    try:
        online = not args.offline
    except:
        online = True

if online:
    rpc.url = config['DEFAULT'].get('rpc', fallback=rpc.url)
    if args.tor or config['DEFAULT'].getboolean('tor', fallback=args.tor):
        rpc.session.proxies['http'] = 'socks5h://localhost:9050'
        rpc.session.proxies['https'] = 'socks5h://localhost:9050'
else:
    print(bcolors.warn1, 'Running in offline mode.', bcolors.end)

rpc.work_url = config['DEFAULT'].get('work_rpc')

try:
    unlock = (args.f != None)
    if args.demo: print(bcolors.warn1, 'Running in demo mode.', bcolors.end)
    if args.empty_to: args.send_to = args.empty_to
except:
    unlock = False

gpg = gnupg.GPG()

accounts = []

if args.new:

    pwd = getpass.getpass()

    if pwd == getpass.getpass(prompt='Enter password again: '):

        seed = os.urandom(32).hex()

        _, _, account0 = deterministic_key(seed, 0)

        with open(account0 + '.asc', 'w') as f:
            asc = gpg.encrypt(
                seed,
                symmetric='AES256',
                passphrase=pwd,
                recipients=None,
                extra_args=['--s2k-digest-algo', 'SHA512'])
            print(f.name[:-4])
            print(str(asc))
            f.write(str(asc))
    else:
        print(bcolors.warn2, 'Passwords do not match.', bcolors.end)

elif args.audit_file:
    accounts = [line.rstrip(b'\n').decode() for line in args.audit_file]

elif unlock:

    seed = gpg.decrypt_file(args.f, passphrase=getpass.getpass())

    if seed.ok:

        if args.audit:
            for i in range(args.index + 1):
                _, _, account_i = deterministic_key(str(seed)[:64], i)
                accounts.append(account_i)

        else:
            generate_block(*deterministic_key(str(seed)[:64], args.index))

    else:
        print(bcolors.warn2, seed.status, bcolors.end)

elif args.broadcast and online:
    ack = rpc.process(
        json.dumps(json.loads(input('Enter JSON block to broadcast: '))))
    try:
        print(bcolors.ok3, ack['hash'], bcolors.end)
    except:
        print(bcolors.warn2, ack, bcolors.end)

else:
    accounts = get_no_value_options('Accounts')

if accounts and online:
    info = rpc.accounts_balances(accounts)
    for account in accounts:
        if nanopy.account_prefix == 'nano_':  # just change already!!!! !@$@#%!$#^#!^
            try:
                info[account]
                print('\033[92m' +
                      'Fixed!!! Upstream changed RPC responses to nano_' +
                      '\033[0m')
            except:
                account = rb = 'xrb_' + account[-60:]
        print('Acc :', account)
        try:
            formatted_balance_printer(
                'Bal', bcolors.ok1,
                mrai_from_raw(info['balances'][account]['balance']))
            if int(info['balances'][account]['pending']):
                print(bcolors.ok3, 'Pending block(s)', bcolors.end)
            print('')
        except:
            print(bcolors.warn2, info[account], bcolors.end, '\n')
